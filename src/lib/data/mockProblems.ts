import { Problem } from '@/types/problem';

export const mockProblems: Record<string, Problem[]> = {
  java: [
    {
      id: 'java-1',
      languageId: 'java',
      code: 'public class HelloWorld {}',
      explanation: 'Javaのクラス定義の基本形。publicキーワードでアクセス制御を指定します。',
      category: 'クラス定義',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'java-2',
      languageId: 'java',
      code: 'int number = 42;',
      explanation: '整数型の変数宣言と初期化。intは32ビット整数を表します。',
      category: '変数宣言',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'java-3',
      languageId: 'java',
      code: 'String message = "Hello";',
      explanation: '文字列型の変数宣言。Stringはダブルクォートで囲みます。',
      category: '変数宣言',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'java-4',
      languageId: 'java',
      code: 'if (x > 0) { return true; }',
      explanation: 'if文の基本形。条件式が真の場合にブロック内を実行します。',
      category: '制御構文',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'java-5',
      languageId: 'java',
      code: 'for (int i = 0; i < 10; i++) {}',
      explanation: 'for文の基本形。初期化、条件、更新の3つの式で構成されます。',
      category: 'ループ',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
  ],
  javascript: [
    {
      id: 'js-1',
      languageId: 'javascript',
      code: 'const greeting = "Hello";',
      explanation: 'constで再代入不可能な変数を宣言。モダンJavaScriptの推奨方法です。',
      category: '変数宣言',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'js-2',
      languageId: 'javascript',
      code: 'let count = 0;',
      explanation: 'letで再代入可能な変数を宣言。ブロックスコープを持ちます。',
      category: '変数宣言',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'js-3',
      languageId: 'javascript',
      code: 'function add(a, b) { return a + b; }',
      explanation: '関数宣言の基本形。引数を受け取り、結果を返します。',
      category: '関数',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'js-4',
      languageId: 'javascript',
      code: 'const arrow = (x) => x * 2;',
      explanation: 'アロー関数の記法。簡潔に関数を定義できます。',
      category: '関数',
      difficulty: 'intermediate',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'js-5',
      languageId: 'javascript',
      code: 'const arr = [1, 2, 3];',
      explanation: '配列リテラルの定義。角括弧で要素を囲みます。',
      category: 'データ構造',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
  ],
  sql: [
    {
      id: 'sql-1',
      languageId: 'sql',
      code: 'SELECT * FROM users;',
      explanation: 'SELECT文の基本形。usersテーブルから全てのカラムを取得します。',
      category: '基本クエリ',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'sql-2',
      languageId: 'sql',
      code: 'SELECT name, email FROM users;',
      explanation: '特定のカラムのみを選択。必要なデータだけ取得できます。',
      category: '基本クエリ',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'sql-3',
      languageId: 'sql',
      code: 'SELECT * FROM users WHERE age > 20;',
      explanation: 'WHERE句で条件を指定。ageが20より大きいレコードを取得します。',
      category: '条件指定',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'sql-4',
      languageId: 'sql',
      code: 'INSERT INTO users (name) VALUES ("John");',
      explanation: 'INSERT文でデータを挿入。カラム名と値を指定します。',
      category: 'データ操作',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'sql-5',
      languageId: 'sql',
      code: 'UPDATE users SET age = 25 WHERE id = 1;',
      explanation: 'UPDATE文でデータを更新。WHERE句で対象を絞ります。',
      category: 'データ操作',
      difficulty: 'beginner',
      createdAt: new Date(),
      updatedAt: new Date(),
    },
  ],
};

export function getProblemsForLanguage(languageId: string): Problem[] {
  return mockProblems[languageId] || [];
}

export function getRandomProblems(languageId: string, count: number = 5): Problem[] {
  const problems = getProblemsForLanguage(languageId);
  const shuffled = [...problems].sort(() => Math.random() - 0.5);
  return shuffled.slice(0, Math.min(count, problems.length));
}
